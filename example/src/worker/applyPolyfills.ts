/// <reference lib="webworker.importscripts" />

if ('fetch' in self) {
    try {
        self.importScripts(
            'https://polyfill.io/v3/polyfill.min.js?features=HTMLInputElement.prototype.valueAsDate%2Ces2015%2CArray.from%2CArray.isArray%2Ces2017%2Ces2016%2CNodeList.prototype.forEach%2CNodeList.prototype.%40%40iterator%2CNode.prototype.contains%2CElement%2CElement.prototype.after%2CElement.prototype.append%2CElement.prototype.animate%2CElement.prototype.toggleAttribute%2CElement.prototype.scrollIntoView%2CElement.prototype.scrollBy%2CElement.prototype.scroll%2CElement.prototype.replaceWith%2CElement.prototype.remove%2CElement.prototype.previousElementSibling%2CElement.prototype.prepend%2CElement.prototype.placeholder%2CElement.prototype.nextElementSibling%2CElement.prototype.matches%2CElement.prototype.inert%2CElement.prototype.getAttributeNames%2CElement.prototype.dataset%2CElement.prototype.closest%2CElement.prototype.cloneNode%2CElement.prototype.classList%2CElement.prototype.before%2CArray.of%2CArray.prototype.%40%40iterator%2CArray.prototype.copyWithin%2CArray.prototype.every%2CArray.prototype.entries%2CArray.prototype.fill%2CArray.prototype.filter%2CArray.prototype.find%2CArray.prototype.findIndex%2CArray.prototype.flat%2CArray.prototype.includes%2CArray.prototype.forEach%2CArray.prototype.flatMap%2CArray.prototype.values%2CArray.prototype.sort%2CArray.prototype.some%2CArray.prototype.reduceRight%2CArray.prototype.reduce%2CArray.prototype.map%2CArray.prototype.lastIndexOf%2CArray.prototype.keys%2CArray.prototype.indexOf%2CObject.values%2CObject.setPrototypeOf%2CObject.seal%2CObject.preventExtensions%2CObject.keys%2CObject.isSealed%2CObject.isFrozen%2CObject.isExtensible%2CObject.is%2CObject.getPrototypeOf%2CObject.getOwnPropertySymbols%2CObject.getOwnPropertyNames%2CObject.getOwnPropertyDescriptors%2CObject.getOwnPropertyDescriptor%2CObject.fromEntries%2CObject.freeze%2CObject.entries%2CObject.defineProperty%2CObject.defineProperties%2CObject.create%2CObject.assign%2CPromise%2CSymbol.iterator%2CSymbol.isConcatSpreadable%2CSymbol.hasInstance%2CSymbol.for%2CSymbol.asyncIterator%2CSymbol%2CString.prototype.trimStart%2CString.prototype.trimEnd%2CString.prototype.trim%2CString.prototype.sup%2CString.prototype.sub%2CString.prototype.strike%2CString.prototype.startsWith%2CString.prototype.small%2CString.prototype.replaceAll%2CString.prototype.repeat%2CString.prototype.padStart%2CString.prototype.normalize%2CString.prototype.link%2CString.prototype.padEnd%2CString.prototype.italics%2CString.prototype.includes%2CString.prototype.fontsize%2CString.prototype.fontcolor%2CString.prototype.fixed%2CString.prototype.endsWith%2CString.prototype.codePointAt%2CString.prototype.blink%2CString.prototype.bold%2CString.prototype.big%2CString.prototype.anchor%2CString.prototype.%40%40iterator%2CString.fromCodePoint%2CSymbol.unscopables%2CSymbol.toStringTag%2CSymbol.toPrimitive%2CSymbol.split%2CSymbol.species%2CSymbol.search%2CSymbol.replace%2CSymbol.prototype.description%2CSymbol.match%2CSymbol.keyFor%2CURLSearchParams%2CURL.prototype.toJSON%2CURL%2Cfetch'
        );
    } catch (ex) {
        // Do nothing
    }
}
